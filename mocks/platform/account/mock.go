// Code generated by MockGen. DO NOT EDIT.
// Source: linkaja-test/platform/mysql (interfaces: AccountAdapter)

// Package mock_account is a generated GoMock package.
package mock_account

import (
	domain "linkaja-test/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAccountAdapter is a mock of AccountAdapter interface.
type MockAccountAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockAccountAdapterMockRecorder
}

// MockAccountAdapterMockRecorder is the mock recorder for MockAccountAdapter.
type MockAccountAdapterMockRecorder struct {
	mock *MockAccountAdapter
}

// NewMockAccountAdapter creates a new mock instance.
func NewMockAccountAdapter(ctrl *gomock.Controller) *MockAccountAdapter {
	mock := &MockAccountAdapter{ctrl: ctrl}
	mock.recorder = &MockAccountAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountAdapter) EXPECT() *MockAccountAdapterMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockAccountAdapter) Get(arg0 uint) (domain.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(domain.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAccountAdapterMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAccountAdapter)(nil).Get), arg0)
}

// UpdateBalance mocks base method.
func (m *MockAccountAdapter) UpdateBalance(arg0, arg1 uint, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalance", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBalance indicates an expected call of UpdateBalance.
func (mr *MockAccountAdapterMockRecorder) UpdateBalance(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalance", reflect.TypeOf((*MockAccountAdapter)(nil).UpdateBalance), arg0, arg1, arg2)
}
